{"version":3,"sources":["App.js","serviceWorker.js","index.js","image_kan-256x256.png"],"names":["App","useState","data","setData","mode","setMode","width","setWidth","useEffect","setWindSize","window","addEventListener","removeEventListener","innerWidth","id","style","display","flexDirection","flex","justifyContent","onClick","e","margin","padding","height","backgroundColor","qrpict","document","getElementById","html2canvas","then","canvas","pngUrl","toDataURL","downloadLink","createElement","href","download","body","appendChild","click","removeChild","loadQR","minHeight","alignItems","fontSize","size","logoImage","img","value","delay","onError","err","console","error","onScan","dt","undefined","str","facingMode","borderWidth","borderColor","url","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.87857368.chunk.js","sourcesContent":["import React from 'react';\nimport {useState,useEffect} from 'react';\nimport img from './image_kan-256x256.png';\nimport Iframe from 'react-iframe';\nimport { QRCode } from 'react-qrcode-logo';\nimport html2canvas from 'html2canvas';\nimport QrReader from 'react-qr-reader';\n\nconst App = () => {\n  const [data,setData] = useState('');\n  const [mode, setMode] = useState(3);\n  const [width, setWidth] = useState(100);\n\n  useEffect(()=> {\n    setWindSize();\n    window.addEventListener('resize', setWindSize);\n    return ()=> {\n      window.removeEventListener('resize', setWindSize);\n    };\n  },[]);\n  const loadQR = () => {\n    if(mode!==1) return;\n\n    const qrpict = document.getElementById('printqrcode');\n    html2canvas(qrpict).then(function(canvas) {\n      const pngUrl = canvas\n        .toDataURL(\"image/png\");\n      let downloadLink = document.createElement(\"a\");\n      downloadLink.href = pngUrl;\n      downloadLink.download = \"store-qrcode.png\";\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    }); \n  }\n  const setWindSize = () => {\n    setWidth(window.innerWidth);\n  }\n  const handleScan = dt => {\n    setData(dt);\n    if(dt!==undefined && dt!=='') {\n      var str = str(dt);\n/*\n      if(str.startsWith(\"https://\")) {\n        setMode(1);\n      }\n*/\n    }\n  }\n  const handleError = err => {\n    console.error(err);\n  }\n  return (\n    <div id='qr2' style={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n      }}>\n      <div style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'center',\n        }}>\n        <div onClick={(e)=>setMode(1)} style={{\n            margin: 5,\n            padding: 10, width: 10, height: 10,\n            backgroundColor: (mode===1? 'lightgreen':'lightgrey'),\n          }}></div>\n        <div onClick={(e)=>setMode(2)} style={{\n            margin: 5,\n            padding: 10, width: 10, height: 10,\n            backgroundColor: (mode===2? 'lightgreen':'lightgrey'),\n          }}></div>\n        <div onClick={(e)=>setMode(3)} style={{\n            margin: 5,\n            padding: 10, width: 10, height: 10,\n            backgroundColor: (mode===3? 'lightgreen':'lightgrey'),\n          }}></div>\n        <div onClick={(e)=>loadQR()} style={{\n            margin: 5,\n            padding: 10, width: 10, height: 10,\n            backgroundColor: (mode===3? 'lightgreen':'lightgrey'),\n          }}></div>\n      </div>\n      { mode===1 && //==== MODE 1\n        <header id='printqrcode' style={{\n          minHeight: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 'calc(10px + 2vmin)',\n          backgroundColor: 'lightblue',\n          }}>\n          <p>{data}</p>\n          <QRCode id='xprintqrcode' style={{\n              display: 'flex',\n            }}\n            size={width*3/4}\n            logoImage={img}\n            value=\"https://github.com/gcoro/react-qrcode-logo\" />\n        </header>\n      }\n      { mode===2 && //=================== MODE 2\n        <header style={{\n          minHeight: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 'calc(10px + 2vmin)',\n          }}>\n          <div>SCAN: {data}</div>\n          <QrReader\n            delay={300}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: '100%' }}\n            facingMode='environment'\n          />\n        </header>\n      }\n      { mode===3 && //=================== MODE 3\n        <header style={{\n          minHeight: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 'calc(10px + 2vmin)',\n          borderWidth: 1,\n          borderColor: 'red',\n          }}>\n         <Iframe url=\"https://covidkan.tueng.org/link/link.html\"\n           style={{\n             width: width*1/4,\n           }}\n         />\n         <Iframe url=\"https://covidkan.tueng.org/link/link.html\"\n           style={{\n             width: width*1/4,\n           }}\n         />\n        </header>\n      }\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image_kan-256x256.904c77a7.png\";"],"sourceRoot":""}